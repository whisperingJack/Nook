(function() {
  var ESLINT_OPTION, SOURCE, bump, eslint, filter, git, gulp, inc, minimist, mocha, tagVersion;

  gulp = require('gulp');

  mocha = require('gulp-mocha');

  eslint = require('gulp-eslint');

  minimist = require('minimist');

  git = require('gulp-git');

  bump = require('gulp-bump');

  filter = require('gulp-filter');

  tagVersion = require('gulp-tag-version');

  require('coffee-script/register');

  SOURCE = ['*.js'];

  ESLINT_OPTION = {
    rules: {
      'quotes': 0,
      'eqeqeq': 0,
      'no-use-before-define': 0,
      'no-shadow': 0,
      'no-new': 0,
      'no-underscore-dangle': 0,
      'no-multi-spaces': 0,
      'no-native-reassign': 0,
      'no-loop-func': 0
    },
    env: {
      'node': true
    }
  };

  gulp.task('test', function() {
    var options;
    options = minimist(process.argv.slice(2), {
      string: 'test',
      "default": {
        test: 'test/*.coffee'
      }
    });
    return gulp.src(options.test).pipe(mocha({
      reporter: 'spec'
    }));
  });

  gulp.task('lint', function() {
    return gulp.src(SOURCE).pipe(eslint(ESLINT_OPTION)).pipe(eslint.formatEach('stylish', process.stderr)).pipe(eslint.failOnError());
  });

  inc = function(importance) {
    return gulp.src(['./package.json']).pipe(bump({
      type: importance
    })).pipe(gulp.dest('./')).pipe(git.commit('Bumps package version')).pipe(filter('package.json')).pipe(tagVersion({
      prefix: ''
    }));
  };

  gulp.task('travis', ['lint', 'test']);

  gulp.task('default', ['travis']);

  gulp.task('patch', [], function() {
    return inc('patch');
  });

  gulp.task('minor', [], function() {
    return inc('minor');
  });

  gulp.task('major', [], function() {
    return inc('major');
  });

}).call(this);
