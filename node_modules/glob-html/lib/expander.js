(function() {
  var S, cheerio, expandOne, glob, path, util, _;

  cheerio = require('cheerio');

  glob = require('glob');

  path = require('path');

  _ = require('lodash');

  S = require('string');

  util = require('./util');

  expandOne = function($, elem, options, callback) {
    var $elem, defaultGroup, expr, src, srcProp, tag, _ref, _ref1;
    $elem = $(elem);
    tag = elem.name;
    srcProp = util.getSrcProperty(tag);
    src = (_ref = $elem.attr(srcProp)) != null ? _ref : $elem.attr('glob');
    expr = path.join(options.basepath, src);
    defaultGroup = (_ref1 = options.group) != null ? _ref1 : 'application';
    return glob(expr, function(err, files) {
      _.each(files, function(file) {
        var $existing, $newElem, filepath, group, _ref2;
        group = (_ref2 = $elem.attr('group')) != null ? _ref2 : defaultGroup;
        filepath = file.replace(options.basepath, '');
        if (src[0] !== '/') {
          filepath = S(filepath).chompLeft('/').s;
        }
        $existing = $("" + tag + "[group=\"" + group + "\"][" + srcProp + "=\"" + filepath + "\"]");
        if ($existing.length > 0 && !$existing.is($elem)) {
          return;
        }
        $newElem = $elem.clone().attr(srcProp, filepath).attr('glob', null);
        if (_.isEmpty($newElem.attr('group'))) {
          $newElem.attr('group', defaultGroup);
        }
        return $elem.before($.html($newElem));
      });
      $elem.remove();
      return callback();
    });
  };

  exports.expand = function(rawHtml, options, callback) {
    var $, count, toGlob, _ref, _ref1;
    $ = cheerio.load(rawHtml, {
      decodeEntities: false
    });
    if (_.isFunction(options)) {
      _ref = [{}, options], options = _ref[0], callback = _ref[1];
    }
    if (options.basepath == null) {
      options.basepath = '';
    }
    _ref1 = [$('*[glob]'), 0], toGlob = _ref1[0], count = _ref1[1];
    if (toGlob.length === 0) {
      return callback($);
    }
    return toGlob.each(function(i, elem) {
      return expandOne($, elem, options, function() {
        count += 1;
        if (count === toGlob.length) {
          return callback($);
        }
      });
    });
  };

}).call(this);
