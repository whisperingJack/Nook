(function() {
  var beautifyHtml, expander, fs, getHtml, path, processor, _;

  _ = require('lodash');

  fs = require('fs');

  path = require('path');

  beautifyHtml = require('js-beautify').html;

  expander = require('./expander');

  processor = require('./processor');

  getHtml = function($, options) {
    if (options.tidy) {
      return beautifyHtml($.html());
    } else {
      return $.html();
    }
  };

  exports.process = function(rawHtml, options, callback) {
    var _ref;
    if (_.isFunction(options)) {
      _ref = [{}, options], options = _ref[0], callback = _ref[1];
    }
    if (options == null) {
      options = {};
    }
    if (options.tidy == null) {
      options.tidy = true;
    }
    return expander.expand(rawHtml, options, function($) {
      if (options.concat) {
        return processor.concatAndMinify($, options, function($) {
          return callback(getHtml($, options));
        });
      } else {
        $('*[group]').attr('group', null);
        return callback(getHtml($, options));
      }
    });
  };

  exports.processFile = function(filepath, options, callback) {
    var _ref;
    if (_.isFunction(options)) {
      _ref = [{}, options], options = _ref[0], callback = _ref[1];
    }
    if (options == null) {
      options = {};
    }
    if (options.basepath == null) {
      options.basepath = path.dirname(filepath);
    }
    if (options.output) {
      if (options.outdir == null) {
        options.outdir = path.dirname(options.output);
      }
    }
    return fs.readFile(filepath, 'utf8', function(err, rawHtml) {
      if (err != null) {
        return callback(err);
      }
      return exports.process(rawHtml, options, function(html) {
        if (options.output) {
          return fs.writeFile(options.output, html, function() {
            return callback(null, html);
          });
        } else {
          return callback(null, html);
        }
      });
    });
  };

}).call(this);
